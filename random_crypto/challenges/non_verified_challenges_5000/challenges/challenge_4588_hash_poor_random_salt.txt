A rushed developer hashed passwords with SHA-256 and a timestamp-based salt. Recover the original password from f31ca5943c7c0c08c6982a62d89c16c6f002c2250815ad596e973d225b42e6b2 by exploiting the weak salt randomness.

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{5de}
ciphertext: f31ca5943c7c0c08c6982a62d89c16c6f002c2250815ad596e973d225b42e6b2
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

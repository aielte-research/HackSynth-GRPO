A careless dev hashed secret passwords with SHA-256 and a timestamp as salt. Recover the original password from 4d985b6aa56a05b0734f10e2baa1da9b8a5fa9dbbc77e6cc5d1b31cedb01a6b1 using what you know about poor salts.

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{yn4}
ciphertext: 4d985b6aa56a05b0734f10e2baa1da9b8a5fa9dbbc77e6cc5d1b31cedb01a6b1
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

Someone encrypted the flag with a homemade PRNG, seeded from the current minute. All we have is this ciphertext: 666c60a87b6933b8366435b6327d. Can you recover the original flag?

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [463, 573, 476, 462, 520, 601, 194, 189, 524, 487, 190, 96, 457, 310, 145, 92, 551, 42, 609, 405]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 620)

---

## Challenge Technical Details
flag: flag{i2w6d4y2}
ciphertext: 666c60a87b6933b8366435b6327d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [463, 573, 476, 462, 520, 601, 194, 189, 524, 487, 190, 96, 457, 310, 145, 92, 551, 42, 609, 405]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 620)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

A hurried intern encrypted the server password with a weak random number generator. Recover the plaintext from the ciphertext below: 666c634b7b6a64476f64755b6c7d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [637, 261, 759, 367, 707, 757, 667, 542, 29, 476, 794, 255, 664, 53, 160, 115, 380, 480, 252, 389]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 810)

---

## Challenge Technical Details
flag: flag{jfkodwwl}
ciphertext: 666c634b7b6a64476f64755b6c7d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [637, 261, 759, 367, 707, 757, 667, 542, 29, 476, 794, 255, 664, 53, 160, 115, 380, 480, 252, 389]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 810)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

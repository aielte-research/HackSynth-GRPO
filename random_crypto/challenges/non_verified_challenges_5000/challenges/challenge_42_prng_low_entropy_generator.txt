An amateur coder encrypted his diary using a weak PRNG, confident it was secure. Can you recover his secret from the ciphertext? 666c61c77b6630d4393271ce347d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [474, 627, 382, 273, 141, 190, 6, 346, 514, 474, 619, 82, 342, 567, 631, 41, 388, 173, 462, 432]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 660)

---

## Challenge Technical Details
flag: flag{f0t92qn4}
ciphertext: 666c61c77b6630d4393271ce347d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [474, 627, 382, 273, 141, 190, 6, 346, 514, 474, 619, 82, 342, 567, 631, 41, 388, 173, 462, 432]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 660)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

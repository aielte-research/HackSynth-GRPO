
A careless intern encrypted the flag using a PRNG with only 6 bits of entropy. Can you recover the original message from this weak encryption? Ciphertext: 666c61bc7b7236ac377a32be757d


The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [265, 297, 701, 700, 821, 869, 190, 667, 236, 682, 150, 890, 230, 656, 751, 191, 133, 72, 544, 866]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 898)

---

## Challenge Technical Details
flag: flag{r6w7z2eu}
ciphertext: 666c61bc7b7236ac377a32be757d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [265, 297, 701, 700, 821, 869, 190, 667, 236, 682, 150, 890, 230, 656, 751, 191, 133, 72, 544, 866]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 898)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

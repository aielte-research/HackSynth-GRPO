A novice coder used a low-entropy PRNG to encrypt their secret with a homemade cipher. Can you recover the message from this ciphertext? 666c60177b6d691d6f703401357d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [241, 310, 105, 738, 405, 490, 158, 92, 68, 20, 411, 562, 939, 296, 819, 783, 60, 227, 532, 549]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 958)

---

## Challenge Technical Details
flag: flag{mhmop5q5}
ciphertext: 666c60177b6d691d6f703401357d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [241, 310, 105, 738, 405, 490, 158, 92, 68, 20, 411, 562, 939, 296, 819, 783, 60, 227, 532, 549]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 958)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

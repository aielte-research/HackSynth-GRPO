
Alice encrypted her secret with a homebrew RNG cipher, boasting about its "unique randomness." Can you recover her message from the ciphertext below?
666c634a7b6671547a70705e307d


The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [57, 93, 86, 369, 173, 685, 315, 257, 620, 217, 621, 36, 595, 697, 162, 441, 653, 402, 521, 380]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 720)

---

## Challenge Technical Details
flag: flag{fsyzprs0}
ciphertext: 666c634a7b6671547a70705e307d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [57, 93, 86, 369, 173, 685, 315, 257, 620, 217, 621, 36, 595, 697, 162, 441, 653, 402, 521, 380]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 720)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

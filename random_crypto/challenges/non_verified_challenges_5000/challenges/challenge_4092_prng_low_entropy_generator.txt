Hackers swiped our plans, but their PRNG was weak. We intercepted this 666c612c7b33377366666221347dâ€”can you recover the secret before they do?

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [394, 430, 41, 265, 523, 497, 414, 310, 488, 366, 223, 516, 142, 288, 143, 97, 256, 150, 317, 101]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 539)

---

## Challenge Technical Details
flag: flag{378ffbj4}
ciphertext: 666c612c7b33377366666221347d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [394, 430, 41, 265, 523, 497, 414, 310, 488, 366, 223, 516, 142, 288, 143, 97, 256, 150, 317, 101]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 539)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

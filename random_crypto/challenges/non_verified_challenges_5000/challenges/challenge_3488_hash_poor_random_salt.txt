Bob hashed passwords with SHA-256 and added a timestamp as salt. Now, ddd7dbf88ec19f0241442e1634bc058d93194d9a9ee6388c37a4d55bfc5cb4b2 waitsâ€”can you reveal the original password exploiting this weak randomness?

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{b7q}
ciphertext: ddd7dbf88ec19f0241442e1634bc058d93194d9a9ee6388c37a4d55bfc5cb4b2
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

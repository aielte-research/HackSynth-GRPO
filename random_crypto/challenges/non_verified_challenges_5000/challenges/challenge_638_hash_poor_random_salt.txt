A hasty developer used SHA-256 with a weak, deterministic salt to hash sensitive data. Can you recover the original input from the resulting hash? 9202378b92ff1e2c1c7cedeb066acf8b3a1cb4e3ad6178105070e0f86df59cc6

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{dyn}
ciphertext: 9202378b92ff1e2c1c7cedeb066acf8b3a1cb4e3ad6178105070e0f86df59cc6
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

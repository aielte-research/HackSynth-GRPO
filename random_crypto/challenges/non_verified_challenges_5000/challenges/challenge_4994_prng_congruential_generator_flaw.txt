
A hacker claims their payouts are secured by random tokens, but leaked logs reveal tokens are generated by a predictable LCG. Recover the original payout using 6063828e7d75879f773ad3856372.


The flag format is flag{...}
A Linear Congruential Generator (LCG) was used with the following parameters:
  - Modulus: 1039880421
  - Multiplier: 859163205
  - Increment: 968396560
The first 5 outputs of the LCG are provided: [780390805, 383732974, 740325880, 926946550, 151350769] 
The next output was used as a symmetric key to XOR-encrypt the flag.

---

## Challenge Technical Details
flag: flag{zdvq50le}
ciphertext: 6063828e7d75879f773ad3856372
cipher: LCG Predictability
hint: LCGs are deterministic. Find the seed or deduce the next output to recover the encryption key.
necessary_info: The flag format is flag{...}
A Linear Congruential Generator (LCG) was used with the following parameters:
  - Modulus: 1039880421
  - Multiplier: 859163205
  - Increment: 968396560
The first 5 outputs of the LCG are provided: [780390805, 383732974, 740325880, 926946550, 151350769] 
The next output was used as a symmetric key to XOR-encrypt the flag.
extra_info: LCGs have a known mathematical structure. Recovering the seed allows predicting all future values.
subtype: congruential_generator_flaw
archetype: prng

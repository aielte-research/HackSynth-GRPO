An intern encrypted the flag with a homebrew script using a poorly-seeded PRNG. Can you recover the message from the ciphertext below? 666c61c77b7662da6d7a71c2687d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [474, 627, 382, 273, 141, 190, 6, 346, 514, 474, 619, 82, 342, 567, 631, 41, 388, 173, 462, 432]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 654)

---

## Challenge Technical Details
flag: flag{vbzmzqbh}
ciphertext: 666c61c77b7662da6d7a71c2687d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [474, 627, 382, 273, 141, 190, 6, 346, 514, 474, 619, 82, 342, 567, 631, 41, 388, 173, 462, 432]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 654)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

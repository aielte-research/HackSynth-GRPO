An intern encrypted the flag with a custom PRNG, seeding it with their favorite number. Can you recover the message? Ciphertext: 666c638c7b30788a6e69319e347d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [587, 82, 496, 780, 267, 37, 0, 149, 678, 600, 481, 777, 752, 382, 327, 788, 22, 279, 500, 202]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 811)

---

## Challenge Technical Details
flag: flag{0zani3u4}
ciphertext: 666c638c7b30788a6e69319e347d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [587, 82, 496, 780, 267, 37, 0, 149, 678, 600, 481, 777, 752, 382, 327, 788, 22, 279, 500, 202]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 811)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

An intern encrypted the flag with a weak homebrew PRNG cipher but forgot to use a strong seed. Can you break it and recover the message? 666c60787b76396b656575686e7d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [213, 11, 533, 753, 37, 161, 244, 17, 56, 824, 697, 150, 711, 376, 245, 119, 346, 477, 725, 364]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 859)

---

## Challenge Technical Details
flag: flag{v8teetwn}
ciphertext: 666c60787b76396b656575686e7d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [213, 11, 533, 753, 37, 161, 244, 17, 56, 824, 697, 150, 711, 376, 245, 119, 346, 477, 725, 364]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 859)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

Recover the original password from 0b35f7b97667b1ca687a6492bc0e9fc5e30bc728f1fef60af225d68c7b7f85b1, encrypted with SHA-256 and a salt generated by srand(time(0)). The dev forgot better randomnessâ€”can you exploit it?

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{fe1}
ciphertext: 0b35f7b97667b1ca687a6492bc0e9fc5e30bc728f1fef60af225d68c7b7f85b1
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

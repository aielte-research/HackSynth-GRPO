The intern used a rushed PRNG for encrypting the launch codes. Can you recover the message from the ciphertext below, knowing the PRNG has low entropy? 666c63637b36776e346b6630367d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [864, 394, 776, 911, 430, 41, 265, 523, 497, 414, 940, 802, 849, 310, 488, 366, 597, 913, 929, 223]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 964)

---

## Challenge Technical Details
flag: flag{6uj4kd46}
ciphertext: 666c63637b36776e346b6630367d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [864, 394, 776, 911, 430, 41, 265, 523, 497, 414, 940, 802, 849, 310, 488, 366, 597, 913, 929, 223]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 964)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

An insecure PRNG encrypted our secret, but its seed was too simple. Can you recover the message from this ciphertext? 666c60877b6138886838758f727d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [637, 261, 759, 367, 814, 707, 861, 757, 667, 542, 29, 860, 476, 794, 255, 664, 53, 160, 115, 380]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 873)

---

## Challenge Technical Details
flag: flag{a9hh8tor}
ciphertext: 666c60877b6138886838758f727d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [637, 261, 759, 367, 814, 707, 861, 757, 667, 542, 29, 860, 476, 794, 255, 664, 53, 160, 115, 380]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 873)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

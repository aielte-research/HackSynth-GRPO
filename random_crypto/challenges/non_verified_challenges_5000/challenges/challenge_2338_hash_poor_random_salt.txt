A careless developer salted passwords with the time in seconds. Recover the original password that produces hash bfc2ca4196f62416976ef2396969b64d1a626e0723cd131cf5f2156b9ce49f02 using SHA-256 and the poor salt scheme.

The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()

---

## Challenge Technical Details
flag: flag{nqh}
ciphertext: bfc2ca4196f62416976ef2396969b64d1a626e0723cd131cf5f2156b9ce49f02
cipher: SHA-256
vulnerability: poor random salt
hint: You can brute-force the solution.
necessary_info: The salt is the flag with the format flag{salt}.
The code that generated the flag:
salt = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(3))hashlib.sha256((salt + "apple").encode('utf-8')).hexdigest()
subtype: poor_random_salt
archetype: hash

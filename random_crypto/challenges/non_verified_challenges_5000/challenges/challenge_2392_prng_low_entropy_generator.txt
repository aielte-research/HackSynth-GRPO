An intern encrypted the flag with a homegrown PRNG cipher, but forgot to use a strong seed. Hereâ€™s the ciphertext: 666c60aa7b636ca3623276a8737d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [265, 297, 190, 236, 150, 230, 191, 133, 72, 544, 219, 301, 30, 441, 129, 14, 282, 150, 86, 268]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 574)

---

## Challenge Technical Details
flag: flag{cmnb2wes}
ciphertext: 666c60aa7b636ca3623276a8737d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [265, 297, 190, 236, 150, 230, 191, 133, 72, 544, 219, 301, 30, 441, 129, 14, 282, 150, 86, 268]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 574)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

An intern used a simple, low-entropy PRNG to encrypt this secret. Can you recover the plaintext from the ciphertext below?666c61837b7869967670658d387d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [331, 154, 404, 49, 74, 96, 374, 59, 519, 219, 38, 88, 444, 428, 71, 246, 92, 434, 60, 126]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 541)

---

## Challenge Technical Details
flag: flag{xirvpei8}
ciphertext: 666c61837b7869967670658d387d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [331, 154, 404, 49, 74, 96, 374, 59, 519, 219, 38, 88, 444, 428, 71, 246, 92, 434, 60, 126]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 541)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

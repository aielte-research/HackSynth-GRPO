A rushed intern encrypted the password list using a PRNG with too few seeds. Recover the secret from the ciphertext: 666c61c37b6d30d4757267d6717d

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [109, 252, 277, 261, 298, 74, 460, 310, 477, 406, 403, 121, 269, 228, 323, 366, 266, 369, 528, 153]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 537)

---

## Challenge Technical Details
flag: flag{m0purgrq}
ciphertext: 666c61c37b6d30d4757267d6717d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [109, 252, 277, 261, 298, 74, 460, 310, 477, 406, 403, 121, 269, 228, 323, 366, 266, 369, 528, 153]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 537)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng

An intern encrypted the flag with a homemade PRNG cipher, using only their birth year as the seed. The result: 666c61187b72640b346f6348777d. Can you recover the flag?

The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [292, 16, 219, 247, 295, 7, 105, 236, 416, 251, 421, 142, 334, 415, 82, 17, 266, 250, 167, 38]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 504)

---

## Challenge Technical Details
flag: flag{rdt4oc7w}
ciphertext: 666c61187b72640b346f6348777d
cipher: Low-entropy PRNG
hint: The PRNG seed space is small. You can try brute-forcing all possible seeds to reconstruct the sequence.
necessary_info: The flag format is flag{...}
A random number generator was seeded using an 8-bit value (0-255). The first outputs of the generator are: [292, 16, 219, 247, 295, 7, 105, 236, 416, 251, 421, 142, 334, 415, 82, 17, 266, 250, 167, 38]. The next PRNG output was used as a symmetric key to XOR-encrypt the flag.
secret_num = rng.randint(0, 504)
extra_info: Since the seed has only 256 possible values, it can be brute-forced to recover the secret number and decrypt the flag.
subtype: low_entropy_generator
archetype: prng
